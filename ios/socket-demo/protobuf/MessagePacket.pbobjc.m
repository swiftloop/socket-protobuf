// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessagePacket.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "MessagePacket.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessagePacketRoot

@implementation MessagePacketRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessagePacketRoot_FileDescriptor

static GPBFileDescriptor *MessagePacketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum HeartbeatType

GPBEnumDescriptor *HeartbeatType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ping\000Pong\000";
    static const int32_t values[] = {
        HeartbeatType_Ping,
        HeartbeatType_Pong,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HeartbeatType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HeartbeatType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HeartbeatType_IsValidValue(int32_t value__) {
  switch (value__) {
    case HeartbeatType_Ping:
    case HeartbeatType_Pong:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ServiceType

GPBEnumDescriptor *ServiceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Login\000Heartbeat\000";
    static const int32_t values[] = {
        ServiceType_Login,
        ServiceType_Heartbeat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ServiceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ServiceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ServiceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ServiceType_Login:
    case ServiceType_Heartbeat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MessageType

GPBEnumDescriptor *MessageType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MsgTypeSingleText\000MsgTypeSingleImage\000Msg"
        "TypeSingleAudio\000MsgTypeGroupText\000MsgType"
        "GroupImage\000MsgTypeGroupAudio\000";
    static const int32_t values[] = {
        MessageType_MsgTypeSingleText,
        MessageType_MsgTypeSingleImage,
        MessageType_MsgTypeSingleAudio,
        MessageType_MsgTypeGroupText,
        MessageType_MsgTypeGroupImage,
        MessageType_MsgTypeGroupAudio,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageType_MsgTypeSingleText:
    case MessageType_MsgTypeSingleImage:
    case MessageType_MsgTypeSingleAudio:
    case MessageType_MsgTypeGroupText:
    case MessageType_MsgTypeGroupImage:
    case MessageType_MsgTypeGroupAudio:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Packet

@implementation Packet

@dynamic sid;
@dynamic cid;
@dynamic ver;
@dynamic seqNo;
@dynamic body;

typedef struct Packet__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sid;
  uint32_t cid;
  uint32_t ver;
  NSString *seqNo;
  NSData *body;
} Packet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sid",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Sid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Packet__storage_, sid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cid",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Cid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Packet__storage_, cid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ver",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Ver,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Packet__storage_, ver),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "seqNo",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_SeqNo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Packet__storage_, seqNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.clazz = Nil,
        .number = Packet_FieldNumber_Body,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Packet__storage_, body),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Packet class]
                                     rootClass:[MessagePacketRoot class]
                                          file:MessagePacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Packet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginReq

@implementation LoginReq

@dynamic userId;
@dynamic token;
@dynamic deviceType;
@dynamic alias;
@dynamic tag;
@dynamic platform;

typedef struct LoginReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *token;
  NSString *deviceType;
  NSString *alias;
  NSString *tag;
  NSString *platform;
} LoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginReq__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginReq__storage_, deviceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "alias",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_Alias,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginReq__storage_, alias),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tag",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_Tag,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginReq__storage_, tag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.clazz = Nil,
        .number = LoginReq_FieldNumber_Platform,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(LoginReq__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginReq class]
                                     rootClass:[MessagePacketRoot class]
                                          file:MessagePacketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\006\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
